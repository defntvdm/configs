snippet #! "#!/usr/bin/env python3" b
#!/usr/bin/env python3
$0
endsnippet

snippet class "class" b
class ${1:ClassName}:
	def __init__(self, ${2:args}):
		${0:pass}
endsnippet

snippet def "def" b
def ${1:funcname}(${2:args}):
	${0:pass}
endsnippet

snippet adef "async def" b
async def ${1:funcname}(${2:args}):
	${0:pass}
endsnippet

snippet with "with" b
with ${1:context} as ${2:var}:
	${0:pass}
endsnippet

snippet awith "async with" b
async with ${1:context} as ${2:var}:
	pass
endsnippet

snippet if "if" b
if ${1:expr}:
	${0:pass}
endsnippet

snippet ife "ife" b
if ${1:expr}:
	${2:pass}
else:
	${0:pass}
endsnippet

snippet ifi "ifi" b
if ${1:expr}:
	${3:pass}
elif ${2:expr}:
	${0:pass}
endsnippet

snippet ifie "ifie" b
if ${1:expr}:
	${3:pass}
elif ${2:expr}:
	${4:pass}
else:
	${0:pass}
endsnippet

snippet for "for" b
for ${1:item} in ${2:iterable}:
	${0:pass}
endsnippet

snippet afor "async for"
async for ${1:item} in ${2:iterable}:
	pass
endsnippet

snippet from "from" b
from ${1:lib} import ${0:state}
endsnippet
